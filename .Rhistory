# keep a list of the packages used in this script
packages <- c("tidyverse","rio","jmv")
# check each of the packages in the list and install them if they're not installed already
for (i in packages){
if(! i %in% installed.packages()){
install.packages(i,dependencies = TRUE)
}
# show each package that is checked
print(i)
}
# load each package into memory so it can be used in the script
for (i in packages){
library(i,character.only=TRUE)
# show each package that is loaded
print(i)
}
# import the Week1.csv dataset into RStudio
# Using the file.choose() command allows you to select a file to import from another folder.
# dataset <- rio::import(file.choose())
# This command will allow us to import the csv file included in our project folder.
dataset <- rio::import("Week1.csv")
# import the Week1.csv dataset into RStudio
# Using the file.choose() command allows you to select a file to import from another folder.
# dataset <- rio::import(file.choose())
# This command will allow us to import the csv file included in our project folder.
dataset <- rio::import("Week1.csv")
The View() command opens a data tab in RStudio. Notice the eval=FALSE option is set for this block.
The View() command opens a data tab in RStudio. Notice the eval=FALSE option is set for this block.
The View() command opens a data tab in RStudio. Notice the eval=FALSE option is set for this block.
library(readr)
Week1 <- read_csv("Week1.csv")
View(Week1)
The View() command opens a data tab in RStudio. Notice the eval=FALSE option is set for this block.
# These commands are all different ways to examine the dataset in R.
# You can uncomment each row and run the code block to try each one out.
dplyr::glimpse(dataset) #dplyr is part of the Tidyverse packages
str(dataset)
# get descriptive statistics using jmv package
jmv::descriptives(dataset, vars = vars(nominal,ordinal),freq=TRUE)
# get descriptive statistics using jmv package
jmv::descriptives(dataset, vars = vars(interval,ratio),freq=FALSE)
# https://suzan.rbind.io/2018/02/dplyr-tutorial-2/#working-with-discrete-columns
dataset <- dataset %>% mutate(nominal = as.factor(nominal))
levels(dataset$nominal)
dataset <- dataset %>% mutate(ordinal = as.factor(ordinal))
levels(dataset$ordinal)
# These could have been done on a single line.
# dataset <- dataset %>% mutate_at(vars(nominal, ordinal), factor)
# Correct order can be specified for ordinal factors.
dataset <- dataset %>% mutate(ordinal = recode_factor(ordinal,"first"="first","second"="second","third"="third","fourth"="fourth",.ordered=TRUE))
levels(dataset$ordinal)
https://suzan.rbind.io/2018/02/dplyr-tutorial-2/#working-with-discrete-columns
# https://suzan.rbind.io/2018/02/dplyr-tutorial-2/#working-with-discrete-columns
dataset <- dataset %>% mutate(nominal = as.factor(nominal))
levels(dataset$nominal)
dataset <- dataset %>% mutate(ordinal = as.factor(ordinal))
levels(dataset$ordinal)
# These could have been done on a single line.
# dataset <- dataset %>% mutate_at(vars(nominal, ordinal), factor)
# Correct order can be specified for ordinal factors.
dataset <- dataset %>% mutate(ordinal = recode_factor(ordinal,"first"="first","second"="second","third"="third","fourth"="fourth",.ordered=TRUE))
levels(dataset$ordinal)
# get descriptive statistics using jmv package
jmv::descriptives(dataset, vars = vars(nominal,ordinal),freq=TRUE,bar=TRUE)
# get plots for continuous variables using jmv package
jmv::descriptives(dataset, vars = vars(interval,ratio),freq=FALSE, hist=TRUE, box=TRUE)
ggplot(data=dataset, aes(x=nominal)) +
geom_bar(stat="count")
ggplot(data=dataset, aes(x=ordinal)) +
geom_bar(aes(y = (..count..)/sum(..count..)))
ggplot(data=dataset, aes(x= "", y = interval)) +
geom_boxplot()
ggplot(data=dataset, aes(x=ratio)) +
geom_histogram(binwidth = .2)
ggplot(data=dataset, aes(x=interval, y=ratio)) +
geom_point()
qplot(dataset$nominal)
qplot(dataset$ordinal)
qplot(dataset$interval)
qplot(dataset$ratio)
qplot(dataset$nominal,dataset$ratio)
